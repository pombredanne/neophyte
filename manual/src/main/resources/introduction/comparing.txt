[[tutorial-comparing-models]]
Comparing Database Models
=========================

A Graph Database stores data structured in the Nodes and Relationships of a graph. 
How does this compare to other persistence models? 
Because a graph is a generic structure, let's compare how a few models would look in a graph.

== A Graph Database transforms a RDBMS ==

Topple the stacks of records in a relational database while keeping all the relationships, and you'll see a graph. 
Where an RDBMS is optimized for aggregated data, Neo4j is optimized for highly connected data. 

.RDBMS
["dot", "graphdb-compare-rdbms.svg", "meta", scaledwidth="40%"]
----
edge [arrowhead="none" arrowtail="none"]
rankdir="LR"
subgraph cluster_0 {
  color="invis";
  A [shape="record" label="<1>A1|<2>A2|<3>A3"
   fillcolor="NODEHIGHLIGHT"]
}

subgraph cluster_1 {
  color="invis";
  B [shape="record" label="<1>B1|<2>B2|<3>B3|<4>B4|<5>B5|<6>B6|<7>B7"]
}

subgraph cluster_2 {
  color="invis";
  label=""
  C [shape="record" label="<1>C1|<2>C2|<3>C3"
   fillcolor="NODE2HIGHLIGHT"]
}

A:1 -> B:1
A:1 -> B:2
A:2 -> B:4
A:2 -> B:6
A:3 -> B:3
A:3 -> B:5
A:3 -> B:7
C:1 -> B:1
C:1 -> B:4
C:1 -> B:5
C:2 -> B:3
C:2 -> B:7
C:3 -> B:2
C:3 -> B:6
----

.Graph Database as RDBMS
["dot", "graphdb-compare-rdbms-g.svg", "meta", scaledwidth="100%"]
----
edge [arrowhead="none" arrowtail="none"]

A1 [fillcolor="NODEHIGHLIGHT"]
A2 [fillcolor="NODEHIGHLIGHT"]
A3 [fillcolor="NODEHIGHLIGHT"]

C1 [fillcolor="NODE2HIGHLIGHT"]
C2 [fillcolor="NODE2HIGHLIGHT"]
C3 [fillcolor="NODE2HIGHLIGHT"]

A1 -> B1
A1 -> B2
A2 -> B4
A2 -> B6
A3 -> B3
A3 -> B5
A3 -> B7
C1 -> B1
C1 -> B4
C1 -> B5
C2 -> B3
C2 -> B7
C3 -> B2
C3 -> B6
----


== A Graph Database elaborates a Key-Value Store ==

A Key-Value model is great for lookups of simple values or lists. 
When the values are themselves interconnected, you've got a graph. 
Neo4j lets you elaborate the simple data structures into more complex, interconnected data.

.Key-Value Store
["dot", "graphdb-compare-kvstore.svg", "meta"]
----
rankdir="LR"

K [shape="record" label="<1>K1|<2>K2|<3>K3" fillcolor="NODEHIGHLIGHT"]
V1 [shape="record" label="<v>V1|K2"]
V2 [shape="record" label="<v>V2|K1|K3"]
V3 [shape="record" label="<v>V3|K1"]

K:1 -> V1:v
K:2 -> V2:v
K:3 -> V3:v
----

+K*+ represents a key, +V*+ a value.
Note that some keys point to other keys as well as plain values.

.Graph Database as Key-Value Store
["dot", "graphdb-compare-kvstore-g.svg", "meta"]
----
rankdir="LR"

gV1 [label="V1"]
gV2 [label="V2"]
gV3 [label="V3"]

subgraph cluster_0 {
  color="invis"
  rank="same"
  K1 [fillcolor="NODEHIGHLIGHT"]
  K2 [fillcolor="NODEHIGHLIGHT"]
  K3 [fillcolor="NODEHIGHLIGHT"]
}

K1 -> gV1
gV1 -> gV2
gV2 -> gV1
gV2 -> gV3
gV3 -> gV1
K2 -> gV2
K3 -> gV3
----

== A Graph Database relates Column-Family ==

Column Family (BigTable-style) databases are an evolution of key-value,  using "families" to allow grouping of rows.
Stored in a graph, the families could become hierarchical, and the relationships among data becomes explicit.


== A Graph Database navigates a Document Store ==

The container hierarchy of a document database accommodates nice, schema-free data that can easily be represented as a tree. 
Which is of course a graph. 
Refer to other documents (or document elements) within that tree and you have a more expressive representation of the same data. 
When in Neo4j, those relationships are easily navigable.

.Document Store
["dot", "graphdb-compare-docdb.svg", "meta", scaledwidth="75%"]
----
subgraph cluster_0 {
  color="BOXCOLOR"
  label="D1"
  style="filled"
  fillcolor="NODEHIGHLIGHT"
  subgraph cluster_1 {
    label="S1"
    fillcolor="NODE2HIGHLIGHT"
    V1
    "D2/S2"
  }
}
subgraph cluster_2 {
  color="BOXCOLOR"
  label="D2"
  style="filled"
  fillcolor="NODEHIGHLIGHT"
  subgraph cluster_3 {
    label="S2"
    fillcolor="NODE2HIGHLIGHT"
    V2
    V3
  }
  subgraph cluster_4 {
    label="S3"
    fillcolor="NODE2HIGHLIGHT"
    V4
    "D1/S1"
  }
}
----

+D+=Document, +S+=Subdocument, +V+=Value, +D2/S2+ = reference to subdocument in (other) document.

.Graph Database as Document Store
["dot", "graphdb-compare-docdb-g.svg", "meta", scaledwidth="75%"]
----
rankdir="LR"

subgraph cluster_0 {
  color="invis"
  D1 [fillcolor="NODEHIGHLIGHT"]
  D2 [fillcolor="NODEHIGHLIGHT"]
}

subgraph cluster_1 {
  color="invis"
  rank="TB"
  S1 [fillcolor="NODE2HIGHLIGHT"]
  S2 [fillcolor="NODE2HIGHLIGHT"]
  S3 [fillcolor="NODE2HIGHLIGHT"]
}

D1 -> S1 -> V1
D2 -> S2 -> V2
D2 -> S3 -> V4
S1 -> S2
S2 -> V3
S3 -> S1
----


